1
  输入输出模板
  变量名；根据题目给定大写字母，变成小写
  int n,m;
  cin>>n>>m;
  输出变量名：res,ans

2 绝对用vector,不用数组

3 有意义的变量名
常用变量,当前位置 cur，pos,
 输入数组 nums，input
 临时变量
      buffer cache status
 布尔值 flag, found,统一初始化为false
 范围：start end, low, high
 目标值 des, target
 计数值:cnt，
 最大，最小值 ma,mi,中间值mid


 4 范围 4，5，6 则6-4=2，（5，6）个数；2+1 =3 (4,5,6)个数
    1某一段范围数组，下标/值从0开始
    int len = m - n + 1;

    vector<int> steps(len, INT_MAX);
    steps[0] = 0;

     for (int pos = n; pos < m; pos++) {
            if (steps[pos - n] != INT_MAX) { //2 记得减去n

            if(next_pos>m){ //3 注意要判断数组范围，是否越界
                                continue;
                            }

 5 for 循环，遍历，先用临时变量 item,temp 存储所遍历的每个值
 vector<int> factors = get_factors(pos);
               for (int i = 0; i < factors.size(); i++) {
                   int item = factors[i];
                   int next_pos = pos + item;


 6
 map
 include<map>
    map<int,int> record;
  查找，修改
   if(record.find(gifts[i])!=record.end()){
             record[gifts[i]]++;

7 vector
 vector<string> getGray(int n) {
     if(n==0) {return vector<string>(1,"0");}

8
 判断一个数是不是质数
bool is_zhi(int n){
    bool res = true;
    for(int i=2;i*i<=n;i++){
        if(n%i ==0){
            res = false;
            return res;
        }
    }
    return res;
}

9
  动态规划 完全背包问题，求方法的种数
  如 1
     3 5     构造总价值 为5 的硬币组合 有多少种方法
     1 2 5   3种硬币，每种硬币的价值

     1
     2 3
     1 2   （1，1，1） （1，2） 2种

#include <string>
#include <iostream>
#include <vector>
#include <map>
#include <cmath>

using namespace std;

typedef long long LL;

const int FIN = 100000007;

int main() {
    int t;
    cin >> t;
    int n, k;
    while (t--) {
        cin >> n >> k;
        vector<int> coins(n + 1);
        vector<vector<int>> dp(n + 1);
        for (int i = 0; i < n + 1; i++) {
            dp[i] = vector<int>(k + 1, 0);
        }
        for (int i = 1; i <= n; i++) {
            cin >> coins[i];
            dp[i][0] = 1;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= k; j++) {
                if(j<coins[i]){
                  //注意当j<coins[i]时，当前第i个币种不构成新方法，所以结果由前i-1种币值构成  dp[i][j] = dp[i-1][j]%FIN;
                } else{
                 dp方程   dp[i][j] = dp[i - 1][j] % FIN + dp[i][j - coins[i]] % FIN;
                }
//                cout<<"i, j"<<i<<" "<<j<<" "<<dp[i][j]<<endl;
            }
        }

        int res = dp[n][k] % FIN;
        cout << res << endl;


    }

    return 0;

}
